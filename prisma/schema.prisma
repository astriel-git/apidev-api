// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// user model stores basic user information and credentials.
model user {
  userid         BigInt   @id @default(autoincrement())
  datacriacao    DateTime @default(now())
  dataupdate     DateTime @updatedAt
  nome           String   @db.VarChar(255)
  email          String   @unique @db.VarChar(255)
  datanascimento DateTime
  cpf            String   @unique @db.VarChar(11)
  cnpj           String?  @db.VarChar(14)
  razaosocial    String?  @db.VarChar(255)
  senha          String   @db.VarChar(255)
  role           String   @default("user")

  // Relations
  saldos       saldo[]
  cobrancas    cobranca[]
  pagamentos   pagamento[]
  contratos    contrato[]
  recuperacoes recuperacao[]
}

/// saldo model keeps track of remaining credits for each user-package combination.
model saldo {
  saldoid     BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  dataupdate  DateTime @updatedAt
  userid      BigInt
  pacoteid    BigInt
  saldo       Float

  // Relations
  user   user   @relation(fields: [userid], references: [userid])
  pacote pacote @relation(fields: [pacoteid], references: [pacoteid])

  @@unique([userid, pacoteid])
  @@index([userid])
  @@index([pacoteid])
}

/// pacote model defines the various packages available in the system.
model pacote {
  pacoteid    BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  dataupdate  DateTime @updatedAt
  nome        String   @db.VarChar(255)
  descricao   String   @db.VarChar(255)
  valor       Float
  ativo       Boolean

  // Relations
  saldos    saldo[]
  cobrancas cobranca[]
  contratos contrato[]
}

/// cobranca model logs each billing transaction with status, method, and amount details.
model cobranca {
  cobrancaid  BigInt      @id @default(autoincrement())
  datacriacao DateTime    @default(now())
  dataupdate  DateTime    @updatedAt
  userid      BigInt
  pacoteid    BigInt
  datapagto   DateTime?
  metodopagto metodopagto
  status      status
  valor       Float
  saldo       Float

  // Relations
  user       user        @relation(fields: [userid], references: [userid])
  pacote     pacote      @relation(fields: [pacoteid], references: [pacoteid])
  pagamentos pagamento[]

  @@index([userid])
  @@index([pacoteid])
}

/// pagamento model captures each payment attempt with status, response code, and amount.
model pagamento {
  pagamentoid          BigInt      @id @default(autoincrement())
  datacriacao          DateTime    @default(now())
  dataupdate           DateTime    @updatedAt
  userid               BigInt
  cobrancaid           BigInt
  valor                Float
  datapagto            DateTime
  metodopagto          metodopagto
  providertransid      String
  providerresponsecode String
  status               status

  // Relations
  user     user     @relation(fields: [userid], references: [userid])
  cobranca cobranca @relation(fields: [cobrancaid], references: [cobrancaid])

  @@index([userid])
  @@index([cobrancaid])
}

/// contrato model manages recurring contracts with package, user, plan type, and renewal settings.
model contrato {
  contratoid   BigInt    @id @default(autoincrement())
  datacriacao  DateTime  @default(now())
  dataupdate   DateTime  @updatedAt
  userid       BigInt
  pacoteid     BigInt
  tipoplano    String
  saldociclo   Float
  datainicio   DateTime
  datafim      DateTime?
  datacobranca DateTime
  cobrancaauto Boolean
  status       status

  // Relations
  user   user   @relation(fields: [userid], references: [userid])
  pacote pacote @relation(fields: [pacoteid], references: [pacoteid])

  @@index([userid])
  @@index([pacoteid])
}

model recuperacao {
  id          BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  token       String   @unique @db.VarChar(255)
  expiracao   DateTime

  user   user   @relation(fields: [userid], references: [userid])
  userid BigInt
}

/// enum for status (used in cobranca, pagamento, contrato)
enum status {
  concluida
  pendente
  falha
  cancelamento
}

/// enum for payment method (used in cobranca, pagamento)
enum metodopagto {
  credito
  debito
  transferencia
  boleto
  pix
}

enum role {
  user
  admin
}

model cnae {
  cnaeid      BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  codigo      String   @db.VarChar(20)
  descricao   String   @db.VarChar(500)
}

model empresas {
  empresaid                 BigInt   @id @default(autoincrement())
  datacriacao               DateTime @default(now())
  cnpjbasico                String?  @db.VarChar(8)
  razaosocial               String?  @db.VarChar(255)
  naturezajuridica          String?  @db.VarChar(255)
  qualificacaoresponsavel   String?  @db.VarChar(255)
  capitalsocial             String?  @db.VarChar(30)
  porteempresa              Int?
  entefederativoresponsavel String?  @db.VarChar(255)
}

model estabelecimentos {
  idestabelecimento         BigInt   @id @default(autoincrement())
  datacriacao               DateTime @default(now())
  cnpjbasico                String?  @db.VarChar(8)
  cnpjordem                 String?  @db.VarChar(4)
  cnpjdv                    String?  @db.VarChar(2)
  identificadormatrizfilial Int?
  nomefantasia              String?  @db.VarChar(255)
  situacaocadastral         Int
  datasituacaocadastral     String?  @db.VarChar(40)
  motivosituacaocadastral   Int?
  nomecidadeexterior        String?  @db.VarChar(255)
  pais                      Int?
  datainicioatividade       String?  @db.VarChar(40)
  cnaefiscalprincipal       String?  @db.VarChar(255)
  cnaefiscalsecundaria      String?  @db.VarChar(255)
  tipologradouro            String?  @db.VarChar(255)
  logradouro                String?  @db.VarChar(255)
  numero                    String?  @db.VarChar(255)
  complemento               String?  @db.VarChar(255)
  bairro                    String?  @db.VarChar(255)
  cep                       String?  @db.VarChar(20)
  uf                        String?  @db.VarChar(2)
  municipio                 String?  @db.VarChar(255)
  ddd1                      String?  @db.VarChar(4)
  telefone1                 String?  @db.VarChar(20)
  ddd2                      String?  @db.VarChar(4)
  telefone2                 String?  @db.VarChar(20)
  dddfax                    String?  @db.VarChar(4)
  fax                       String?  @db.VarChar(20)
  correioeletronico         String?  @db.VarChar(255)
  situacaoespecial          String?  @db.VarChar(255)
  datasituacaoespecial      String?  @db.VarChar(40)
}

model simples {
  simplesid             BigInt   @id @default(autoincrement())
  datacriacao           DateTime @default(now())
  cnpjbasico            String?  @db.Char(8)
  opcopelosimples       String?  @db.Char(1)
  dataopcelosimples     String?  @db.VarChar(40)
  dataexclusaodosimples String?  @db.VarChar(40)
  opcopelomei           String?  @db.VarChar(3)
  dataopcelomei         String?  @db.VarChar(40)
  dataexclusaodomei     String?  @db.VarChar(40)
}

model socios {
  socioid                   BigInt   @id @default(autoincrement())
  datacriacao               DateTime @default(now())
  cnpjbasico                String?  @db.Char(8)
  identificadorsocio        Int?
  nomesocio                 String?  @db.VarChar(255)
  cnpjcpfsocio              String?  @db.VarChar(14)
  qualificacaosocio         Int?
  dataentradasociedade      String?  @db.VarChar(40)
  pais                      Int?
  representantelegal        String?  @db.VarChar(11)
  nomerepresentante         String?  @db.VarChar(255)
  qualificacaorepresentante Int?
  faixaetaria               Int?
}

model municipios {
  municipioid BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  codigo      String?  @db.VarChar(10)
  descricao   String?  @db.VarChar(255)
}

model naturezas {
  naturezaid  BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  codigo      String?  @db.VarChar(10)
  descricao   String?  @db.VarChar(255)
}

model situacaocadastral {
  situacaoid  BigInt   @id @default(autoincrement())
  datacriacao DateTime @default(now())
  codigo      String?  @db.VarChar(10)
  descricao   String?  @db.VarChar(255)
}
